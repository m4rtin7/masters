//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/m4rtin7/masters/parser/AntlrParser/Oal.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class OalLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, NAME=9, 
		STRING=10, STATEMENT=11, NUMBER=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "NAME", 
		"STRING", "STATEMENT", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", "NUMBER", 
		"INT", "EXP", "WS"
	};


	public OalLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public OalLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'create object instance '", "' of '", "';'", "'.'", "'();'", "'while ('", 
		"')'", "'end while;'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "NAME", "STRING", 
		"STATEMENT", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Oal.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static OalLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,179,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
		1,8,5,8,100,8,8,10,8,12,8,103,9,8,1,9,1,9,1,9,5,9,108,8,9,10,9,12,9,111,
		9,9,1,9,1,9,1,10,1,10,3,10,117,8,10,1,10,1,10,1,10,3,10,122,8,10,1,11,
		1,11,1,11,3,11,127,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,
		14,1,15,3,15,140,8,15,1,15,1,15,1,15,4,15,145,8,15,11,15,12,15,146,3,15,
		149,8,15,1,15,3,15,152,8,15,1,16,1,16,1,16,5,16,157,8,16,10,16,12,16,160,
		9,16,3,16,162,8,16,1,17,1,17,3,17,166,8,17,1,17,4,17,169,8,17,11,17,12,
		17,170,1,18,4,18,174,8,18,11,18,12,18,175,1,18,1,18,0,0,19,1,1,3,2,5,3,
		7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,0,25,0,27,0,29,0,31,12,33,0,
		35,0,37,13,1,0,10,4,0,35,35,65,90,95,95,97,122,5,0,35,35,48,57,65,90,95,
		95,97,122,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,
		3,0,48,57,65,70,97,102,3,0,0,31,34,34,92,92,1,0,48,57,1,0,49,57,2,0,69,
		69,101,101,2,0,43,43,45,45,3,0,9,10,13,13,32,32,187,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,31,1,0,0,0,0,37,1,
		0,0,0,1,39,1,0,0,0,3,63,1,0,0,0,5,68,1,0,0,0,7,70,1,0,0,0,9,72,1,0,0,0,
		11,76,1,0,0,0,13,84,1,0,0,0,15,86,1,0,0,0,17,97,1,0,0,0,19,104,1,0,0,0,
		21,116,1,0,0,0,23,123,1,0,0,0,25,128,1,0,0,0,27,134,1,0,0,0,29,136,1,0,
		0,0,31,139,1,0,0,0,33,161,1,0,0,0,35,163,1,0,0,0,37,173,1,0,0,0,39,40,
		5,99,0,0,40,41,5,114,0,0,41,42,5,101,0,0,42,43,5,97,0,0,43,44,5,116,0,
		0,44,45,5,101,0,0,45,46,5,32,0,0,46,47,5,111,0,0,47,48,5,98,0,0,48,49,
		5,106,0,0,49,50,5,101,0,0,50,51,5,99,0,0,51,52,5,116,0,0,52,53,5,32,0,
		0,53,54,5,105,0,0,54,55,5,110,0,0,55,56,5,115,0,0,56,57,5,116,0,0,57,58,
		5,97,0,0,58,59,5,110,0,0,59,60,5,99,0,0,60,61,5,101,0,0,61,62,5,32,0,0,
		62,2,1,0,0,0,63,64,5,32,0,0,64,65,5,111,0,0,65,66,5,102,0,0,66,67,5,32,
		0,0,67,4,1,0,0,0,68,69,5,59,0,0,69,6,1,0,0,0,70,71,5,46,0,0,71,8,1,0,0,
		0,72,73,5,40,0,0,73,74,5,41,0,0,74,75,5,59,0,0,75,10,1,0,0,0,76,77,5,119,
		0,0,77,78,5,104,0,0,78,79,5,105,0,0,79,80,5,108,0,0,80,81,5,101,0,0,81,
		82,5,32,0,0,82,83,5,40,0,0,83,12,1,0,0,0,84,85,5,41,0,0,85,14,1,0,0,0,
		86,87,5,101,0,0,87,88,5,110,0,0,88,89,5,100,0,0,89,90,5,32,0,0,90,91,5,
		119,0,0,91,92,5,104,0,0,92,93,5,105,0,0,93,94,5,108,0,0,94,95,5,101,0,
		0,95,96,5,59,0,0,96,16,1,0,0,0,97,101,7,0,0,0,98,100,7,1,0,0,99,98,1,0,
		0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,18,1,0,0,0,103,
		101,1,0,0,0,104,109,5,34,0,0,105,108,3,23,11,0,106,108,3,29,14,0,107,105,
		1,0,0,0,107,106,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,
		0,110,112,1,0,0,0,111,109,1,0,0,0,112,113,5,34,0,0,113,20,1,0,0,0,114,
		117,3,17,8,0,115,117,3,33,16,0,116,114,1,0,0,0,116,115,1,0,0,0,117,118,
		1,0,0,0,118,121,5,62,0,0,119,122,3,17,8,0,120,122,3,33,16,0,121,119,1,
		0,0,0,121,120,1,0,0,0,122,22,1,0,0,0,123,126,5,92,0,0,124,127,7,2,0,0,
		125,127,3,25,12,0,126,124,1,0,0,0,126,125,1,0,0,0,127,24,1,0,0,0,128,129,
		5,117,0,0,129,130,3,27,13,0,130,131,3,27,13,0,131,132,3,27,13,0,132,133,
		3,27,13,0,133,26,1,0,0,0,134,135,7,3,0,0,135,28,1,0,0,0,136,137,8,4,0,
		0,137,30,1,0,0,0,138,140,5,45,0,0,139,138,1,0,0,0,139,140,1,0,0,0,140,
		141,1,0,0,0,141,148,3,33,16,0,142,144,5,46,0,0,143,145,7,5,0,0,144,143,
		1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,
		0,148,142,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,152,3,35,17,0,151,
		150,1,0,0,0,151,152,1,0,0,0,152,32,1,0,0,0,153,162,5,48,0,0,154,158,7,
		6,0,0,155,157,7,5,0,0,156,155,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,
		158,159,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,161,153,1,0,0,0,161,154,
		1,0,0,0,162,34,1,0,0,0,163,165,7,7,0,0,164,166,7,8,0,0,165,164,1,0,0,0,
		165,166,1,0,0,0,166,168,1,0,0,0,167,169,7,5,0,0,168,167,1,0,0,0,169,170,
		1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,36,1,0,0,0,172,174,7,9,0,0,
		173,172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,177,
		1,0,0,0,177,178,6,18,0,0,178,38,1,0,0,0,16,0,101,107,109,116,121,126,139,
		146,148,151,158,161,165,170,175,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
