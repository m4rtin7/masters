//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/m4rtin7/Desktop/masters/parser/AntlrParser/Oal.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class OalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, NAME=21, CONDITION=22, OPERANT=23, NUMBER=24, 
		WS=25;
	public const int
		RULE_json = 0, RULE_className = 1, RULE_instanceName = 2, RULE_functionName = 3, 
		RULE_codeLine = 4, RULE_instanceCreation = 5, RULE_functionCall = 6, RULE_whileCycle = 7, 
		RULE_ifElseCondition = 8, RULE_elseCondition = 9, RULE_ifCondition = 10, 
		RULE_forEach = 11, RULE_thread = 12, RULE_parallel = 13, RULE_element = 14, 
		RULE_elements = 15, RULE_params = 16;
	public static readonly string[] ruleNames = {
		"json", "className", "instanceName", "functionName", "codeLine", "instanceCreation", 
		"functionCall", "whileCycle", "ifElseCondition", "elseCondition", "ifCondition", 
		"forEach", "thread", "parallel", "element", "elements", "params"
	};

	private static readonly string[] _LiteralNames = {
		null, "'create object instance '", "' of '", "';'", "'.'", "'('", "');'", 
		"'();'", "'while '", "'end while;'", "'else if '", "'else'", "'if '", 
		"'end if;'", "'for each '", "' in '", "'end for;'", "'thread'", "'end thread;'", 
		"'par'", "'end par;'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "NAME", "CONDITION", 
		"OPERANT", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Oal.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static OalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JsonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(OalParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext[] codeLine() {
			return GetRuleContexts<CodeLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine(int i) {
			return GetRuleContext<CodeLineContext>(i);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterJson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitJson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 0, RULE_json);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2642178L) != 0)) {
				{
				{
				State = 34;
				codeLine();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(OalParser.NAME, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(OalParser.NAME, 0); }
		public InstanceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterInstanceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitInstanceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceNameContext instanceName() {
		InstanceNameContext _localctx = new InstanceNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_instanceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(OalParser.NAME, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstanceCreationContext instanceCreation() {
			return GetRuleContext<InstanceCreationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileCycleContext whileCycle() {
			return GetRuleContext<WhileCycleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParallelContext parallel() {
			return GetRuleContext<ParallelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachContext forEach() {
			return GetRuleContext<ForEachContext>(0);
		}
		public CodeLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterCodeLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitCodeLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeLineContext codeLine() {
		CodeLineContext _localctx = new CodeLineContext(Context, State);
		EnterRule(_localctx, 8, RULE_codeLine);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				instanceCreation();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				functionCall();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				whileCycle();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51;
				ifCondition();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 5);
				{
				State = 52;
				parallel();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 6);
				{
				State = 53;
				forEach();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceCreationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstanceNameContext instanceName() {
			return GetRuleContext<InstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public InstanceCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterInstanceCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitInstanceCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceCreationContext instanceCreation() {
		InstanceCreationContext _localctx = new InstanceCreationContext(Context, State);
		EnterRule(_localctx, 10, RULE_instanceCreation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(T__0);
			State = 57;
			instanceName();
			State = 58;
			Match(T__1);
			State = 59;
			className();
			State = 60;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstanceNameContext instanceName() {
			return GetRuleContext<InstanceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionCall);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62;
				instanceName();
				State = 63;
				Match(T__3);
				State = 64;
				functionName();
				State = 65;
				Match(T__4);
				State = 66;
				@params();
				State = 67;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				instanceName();
				State = 70;
				Match(T__3);
				State = 71;
				functionName();
				State = 72;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileCycleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(OalParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext[] codeLine() {
			return GetRuleContexts<CodeLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine(int i) {
			return GetRuleContext<CodeLineContext>(i);
		}
		public WhileCycleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileCycle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterWhileCycle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitWhileCycle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileCycle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileCycleContext whileCycle() {
		WhileCycleContext _localctx = new WhileCycleContext(Context, State);
		EnterRule(_localctx, 14, RULE_whileCycle);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(T__7);
			State = 77;
			Match(CONDITION);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2642178L) != 0)) {
				{
				{
				State = 78;
				codeLine();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(OalParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext[] codeLine() {
			return GetRuleContexts<CodeLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine(int i) {
			return GetRuleContext<CodeLineContext>(i);
		}
		public IfElseConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterIfElseCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitIfElseCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseConditionContext ifElseCondition() {
		IfElseConditionContext _localctx = new IfElseConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifElseCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__9);
			State = 87;
			Match(CONDITION);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2642178L) != 0)) {
				{
				{
				State = 88;
				codeLine();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext[] codeLine() {
			return GetRuleContexts<CodeLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine(int i) {
			return GetRuleContext<CodeLineContext>(i);
		}
		public ElseConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterElseCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitElseCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseConditionContext elseCondition() {
		ElseConditionContext _localctx = new ElseConditionContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(T__10);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2642178L) != 0)) {
				{
				{
				State = 95;
				codeLine();
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(OalParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext[] codeLine() {
			return GetRuleContexts<CodeLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine(int i) {
			return GetRuleContext<CodeLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseConditionContext[] ifElseCondition() {
			return GetRuleContexts<IfElseConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseConditionContext ifElseCondition(int i) {
			return GetRuleContext<IfElseConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseConditionContext elseCondition() {
			return GetRuleContext<ElseConditionContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterIfCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitIfCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_ifCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__11);
			State = 102;
			Match(CONDITION);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2642178L) != 0)) {
				{
				{
				State = 103;
				codeLine();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 109;
				ifElseCondition();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 115;
				elseCondition();
				}
			}

			State = 118;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementsContext elements() {
			return GetRuleContext<ElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext[] codeLine() {
			return GetRuleContexts<CodeLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine(int i) {
			return GetRuleContext<CodeLineContext>(i);
		}
		public ForEachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterForEach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitForEach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachContext forEach() {
		ForEachContext _localctx = new ForEachContext(Context, State);
		EnterRule(_localctx, 22, RULE_forEach);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(T__13);
			State = 121;
			element();
			State = 122;
			Match(T__14);
			State = 123;
			elements();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2642178L) != 0)) {
				{
				{
				State = 124;
				codeLine();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext[] codeLine() {
			return GetRuleContexts<CodeLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine(int i) {
			return GetRuleContext<CodeLineContext>(i);
		}
		public ThreadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thread; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterThread(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitThread(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThread(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadContext thread() {
		ThreadContext _localctx = new ThreadContext(Context, State);
		EnterRule(_localctx, 24, RULE_thread);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(T__16);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2642178L) != 0)) {
				{
				{
				State = 133;
				codeLine();
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 139;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParallelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ThreadContext[] thread() {
			return GetRuleContexts<ThreadContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadContext thread(int i) {
			return GetRuleContext<ThreadContext>(i);
		}
		public ParallelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterParallel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitParallel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParallelContext parallel() {
		ParallelContext _localctx = new ParallelContext(Context, State);
		EnterRule(_localctx, 26, RULE_parallel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__18);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 142;
				thread();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 148;
			Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(OalParser.NAME, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 28, RULE_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(OalParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(OalParser.NAME, i);
		}
		public ElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementsContext elements() {
		ElementsContext _localctx = new ElementsContext(Context, State);
		EnterRule(_localctx, 30, RULE_elements);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				Match(NAME);
				State = 154;
				Match(T__3);
				State = 155;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(OalParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(OalParser.NAME, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOalListener typedListener = listener as IOalListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOalVisitor<TResult> typedVisitor = visitor as IOalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 32, RULE_params);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				Match(NAME);
				State = 160;
				Match(T__3);
				State = 161;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,25,165,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,0,1,0,1,1,1,1,1,
		2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,55,8,4,1,5,1,5,1,5,1,5,1,5,1,
		5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,75,8,6,1,7,1,7,1,
		7,5,7,80,8,7,10,7,12,7,83,9,7,1,7,1,7,1,8,1,8,1,8,5,8,90,8,8,10,8,12,8,
		93,9,8,1,9,1,9,5,9,97,8,9,10,9,12,9,100,9,9,1,10,1,10,1,10,5,10,105,8,
		10,10,10,12,10,108,9,10,1,10,5,10,111,8,10,10,10,12,10,114,9,10,1,10,3,
		10,117,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,5,11,126,8,11,10,11,12,
		11,129,9,11,1,11,1,11,1,12,1,12,5,12,135,8,12,10,12,12,12,138,9,12,1,12,
		1,12,1,13,1,13,5,13,144,8,13,10,13,12,13,147,9,13,1,13,1,13,1,14,1,14,
		1,15,1,15,1,15,1,15,3,15,157,8,15,1,16,1,16,1,16,1,16,3,16,163,8,16,1,
		16,0,0,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,0,165,0,37,1,
		0,0,0,2,42,1,0,0,0,4,44,1,0,0,0,6,46,1,0,0,0,8,54,1,0,0,0,10,56,1,0,0,
		0,12,74,1,0,0,0,14,76,1,0,0,0,16,86,1,0,0,0,18,94,1,0,0,0,20,101,1,0,0,
		0,22,120,1,0,0,0,24,132,1,0,0,0,26,141,1,0,0,0,28,150,1,0,0,0,30,156,1,
		0,0,0,32,162,1,0,0,0,34,36,3,8,4,0,35,34,1,0,0,0,36,39,1,0,0,0,37,35,1,
		0,0,0,37,38,1,0,0,0,38,40,1,0,0,0,39,37,1,0,0,0,40,41,5,0,0,1,41,1,1,0,
		0,0,42,43,5,21,0,0,43,3,1,0,0,0,44,45,5,21,0,0,45,5,1,0,0,0,46,47,5,21,
		0,0,47,7,1,0,0,0,48,55,3,10,5,0,49,55,3,12,6,0,50,55,3,14,7,0,51,55,3,
		20,10,0,52,55,3,26,13,0,53,55,3,22,11,0,54,48,1,0,0,0,54,49,1,0,0,0,54,
		50,1,0,0,0,54,51,1,0,0,0,54,52,1,0,0,0,54,53,1,0,0,0,55,9,1,0,0,0,56,57,
		5,1,0,0,57,58,3,4,2,0,58,59,5,2,0,0,59,60,3,2,1,0,60,61,5,3,0,0,61,11,
		1,0,0,0,62,63,3,4,2,0,63,64,5,4,0,0,64,65,3,6,3,0,65,66,5,5,0,0,66,67,
		3,32,16,0,67,68,5,6,0,0,68,75,1,0,0,0,69,70,3,4,2,0,70,71,5,4,0,0,71,72,
		3,6,3,0,72,73,5,7,0,0,73,75,1,0,0,0,74,62,1,0,0,0,74,69,1,0,0,0,75,13,
		1,0,0,0,76,77,5,8,0,0,77,81,5,22,0,0,78,80,3,8,4,0,79,78,1,0,0,0,80,83,
		1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,84,1,0,0,0,83,81,1,0,0,0,84,85,
		5,9,0,0,85,15,1,0,0,0,86,87,5,10,0,0,87,91,5,22,0,0,88,90,3,8,4,0,89,88,
		1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,17,1,0,0,0,93,91,
		1,0,0,0,94,98,5,11,0,0,95,97,3,8,4,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,
		1,0,0,0,98,99,1,0,0,0,99,19,1,0,0,0,100,98,1,0,0,0,101,102,5,12,0,0,102,
		106,5,22,0,0,103,105,3,8,4,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,
		0,0,0,106,107,1,0,0,0,107,112,1,0,0,0,108,106,1,0,0,0,109,111,3,16,8,0,
		110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,116,
		1,0,0,0,114,112,1,0,0,0,115,117,3,18,9,0,116,115,1,0,0,0,116,117,1,0,0,
		0,117,118,1,0,0,0,118,119,5,13,0,0,119,21,1,0,0,0,120,121,5,14,0,0,121,
		122,3,28,14,0,122,123,5,15,0,0,123,127,3,30,15,0,124,126,3,8,4,0,125,124,
		1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,
		0,129,127,1,0,0,0,130,131,5,16,0,0,131,23,1,0,0,0,132,136,5,17,0,0,133,
		135,3,8,4,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,
		0,0,0,137,139,1,0,0,0,138,136,1,0,0,0,139,140,5,18,0,0,140,25,1,0,0,0,
		141,145,5,19,0,0,142,144,3,24,12,0,143,142,1,0,0,0,144,147,1,0,0,0,145,
		143,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,145,1,0,0,0,148,149,5,
		20,0,0,149,27,1,0,0,0,150,151,5,21,0,0,151,29,1,0,0,0,152,157,5,21,0,0,
		153,154,5,21,0,0,154,155,5,4,0,0,155,157,5,21,0,0,156,152,1,0,0,0,156,
		153,1,0,0,0,157,31,1,0,0,0,158,163,5,21,0,0,159,160,5,21,0,0,160,161,5,
		4,0,0,161,163,5,21,0,0,162,158,1,0,0,0,162,159,1,0,0,0,163,33,1,0,0,0,
		14,37,54,74,81,91,98,106,112,116,127,136,145,156,162
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
